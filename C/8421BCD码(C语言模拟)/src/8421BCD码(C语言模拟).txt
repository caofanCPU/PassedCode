//程序要求:输入两个4位8421BCD码,求和,输出十进制数结果
//说明:输入形式必须以回车键结尾,且二进制位数不能超过4
//此外,实验输入端悬空默认为高电平,程序中输入为空默认为低电平
//此程序容纳∞个∞位数的二进制加法求和,只要有内存就行
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
int main()
{
	int i,j,m,k[2]={0},BCD[2][5]={0};    
	//i,j为循环计数变量;m为数据暂存单元;k[2]为数制位保存数组;BCD[2][5]为输入8421BCD码数据存储数组
	char w;                                   //为输入检测变量

	int Y=0,s=0,AND[8]={1},CT[4]={0,0,0,0};       //Y为16->10转换逻辑函数
                                             		//AND[8]为两片74LS00芯片上的8个与非门(And-Not-Door)
                                       			 //CT[5]为16->10的转换变化量
	//从键盘输入字符,删选有效数据并建立默认数据
	for(i=0;i<2;i++)
	{
		printf("请输入第%d个8421BCD码,按 回车键 确定输入\n",i+1);
		m=0;                          //记录8421BCD码的位数并用来判断高位补零与否
		for(j=0;j<5;j++)              //4个二进制位+回车键=5
		{
			w=getchar();
			//输入结束跳出循环
			if(w=='\n')               //选定判断输入结束条件
			{
				while(m<4)
				{
					BCD[i][m]=0;      //8421BCD码不足四位,高位补0,也可以省略此步
					m++;
				}
				break;
			}
			//输入有效位存入数组
			if((w=='0')||(w=='1'))    //if-else嵌套语句规则!极易出错,所以要选定好判断的先后!
			{ 
				BCD[i][j]=w-'0';
				k[i]++;
				m++;
			}

			else
			{
				j--;                  //输入为无效数字(或字符)略过处理
			} 
		}
	}

	//标记显示输入的有效8421BCD码的位数
	for(i=0;i<2;i++)
	{
		printf("输入的第%d个8421BCD码位数为 m%d=%d\n",i+1,i+1,k[i]);
		printf("输入的第%d个8421BCD码为   \t",i+1);
		for(j=0;j<k[i];j++)
		{
			printf("%d",BCD[i][j]);
		}
		printf("\n");
	}
	printf("\n");

	//按照高位对应高地址顺序存储输入8421BCD码
	for(i=0;i<2;i++)
	{
		for(j=0;j<(k[i]+1)/2;j++)
		{
			m=BCD[i][j];
			BCD[i][j]=BCD[i][k[i]-1-j];
			BCD[i][k[i]-1-j]=m;
		}
	}
    
	//输出默认下的输入有效数字
	for(i=0;i<2;i++)
	{
		printf("输入的第%d个8421BCD码为:\t",i+1);
		for(j=4;j>-1;j--)
		{
			printf("%d",BCD[i][j]);
		}
		printf("\n");
	}

	//实现两个二进制数由低位到高位进行全加
	printf("求和结果为:\t");
	for(j=0;j<4;j++)
	{
		BCD[0][j]=BCD[0][j]+BCD[1][j];
		if(BCD[0][j]==2)
		{
			BCD[0][j]=0;
			BCD[0][j+1]+=1;
		}
		if(BCD[0][j]==3)
		{
			BCD[0][j]=1;
			BCD[0][j+1]+=1;
		}
	}
	//输出运算结果
	for(j=4;j>-1;j--)
	{
		printf("%d",BCD[0][j]);
	}
	printf("\n");

	//至此实现了高低电平信号通过74LS83(1)全加器的功能
	//其中C4=BCD[0][4],∑i=BCD[0][i-1],其中i=1,2,3,4
    
	//模拟信号从74LS83(1)输出端进行16进制转换为10进制,并由74LS83(2)输出端在数码管上显示结果
	//计算转换逻辑函数Y
{	if(BCD[0][4]==0)
	{
		AND[1]=1;
	}
	else
	{
		AND[1]=0;
	}
}

{
	if((BCD[0][3]*BCD[0][2])==0)
	{
		AND[2]=1;
	}
	else
	{
		AND[2]=0;
	}
}

{
	if((AND[1]*AND[2])==0)
	{
		AND[3]=1;
	}
	else
	{
		AND[3]=0;
	}
}

{
	if(AND[3]==0)
	{
		AND[4]=1;
	}
	else
	{
		AND[4]=0;
	}
}

{
	if((BCD[0][3]*BCD[0][1])==0)
	{
		AND[5]=1;
	}
	else
	{
		AND[5]=0;
	}
}

{
	if((AND[4]*AND[5])==0)
	{
		AND[6]=1;
	}
	else
	{
		AND[6]=0;
	}
}
	Y=AND[6];
	CT[1]=Y;
	CT[2]=Y;
	printf("逻辑函数值: Y=%d\n",Y);
	    
	//用逻辑函数Y和转换改变量CT[4]完成74LS83(2)的全加功能
	printf("转换结果为:\t");
	for(j=0;j<4;j++)
	{
		BCD[0][j]=BCD[0][j]+CT[j];
		if(BCD[0][j]==2)
		{
			BCD[0][j]=0;
			BCD[0][j+1]+=1;
		}
		if(BCD[0][j]==3)
		{
			BCD[0][j]=1;
			BCD[0][j+1]+=1;
		}
	}

	//输出运算结果
	printf("%d",Y);
	for(j=3;j>-1;j--)
	{
		s+=BCD[0][j]*pow(2,j);
		printf("%d",BCD[0][j]);
	}
	printf("\n");

	//输出数码管显示结果
	printf("\n\t\t********数码管显示如下********\n");
	    printf("\t\t\t*****%d  ",Y);
	if(s<10)
	{
		printf("%d*****\t\t",s);
	}
	else
	{
		printf("NULL***");
	}

	printf("\n");
	system("pause");
	system("cls");
	main();
	return 0;
}