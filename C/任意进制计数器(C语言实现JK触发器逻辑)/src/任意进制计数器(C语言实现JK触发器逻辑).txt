/*                         N进制计数器的权位输出分频比
1.设计要求:
以74LS160十进制计数器为基础元件,在时钟信号CLK有效作用波形下,输出N进制下的Q[X]的波形,假定Q[i0]={0};
进位方式为:并行同步整体置数方式,置数为0
用户以十进制数输入目标进制数(小于100),要体现高容错性能进行限制输入,智能过滤无效字符

2.设计总结:
          <-2.1->  调用函数公式:main中for循环+switch(被调用函数执行标号-全局变量)分支结构,在每一个被调用函数里面都要对
		        函数执行标号进行编号更新,要么回到主界面,要么执行下一个被调用函数
         <-2.2->  在调用函数时参数传递用全局变量,可以完成一些列函数调用接力赛,但是请注意:主界面循环时,全局单变量,全局
		       数组变量的数据是否要进行刷新!!不要前一次执行信息结果会顺次影响下一次执行信息结果!这时就考虑:前一次
		      执行结果信息是否要保存下来,例如进行重复信息存储,这种情况下选用全局变量最好;如果数据是要不断刷新的,
		      尤其是前后执行结果信息毫无关联甚至是要避免关联,那么不要选用全局变量,在调用函数内开辟临时空间,如果
		       这样的信息需要作为函数调用时的参数进行接力传递,那么要采取相应的方法隔绝前后两次执行结果信息影响,
		      例如在调用函数内开辟临时空间存储数据,函数操作结束前把相应信息赋值给对应全局变量,相当于采取临时桥方法
		  <-2.3->  对于全局变量,尤其是全局数组变量,往往由于习惯进行初始化,要明确邻位间或者间隔距离不定数组元素之间的关联
		           在用循环结构对数组元素进行操作时,要格外考虑是否需要把前一个元素的值先保存下来
*/


#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#define  CP           101          //提供脉冲信号周期数+1
#define  BR           20           //设置每行输出脉冲信号数
#define  LimitNumber  100           //输入十进制数限定值
#define  Time         500          //设置停顿单位时间0.5s
//定义全局变量,便于函数参数选择,但是在程序循环时一定要注意其数据是否要初始化!!
int number=0;                      //定义输入十进制数信息存储变量
//int CLK[CP]={0}; //无用繁琐!     //定义脉冲信号有效工作时信息存储数组,CLK[0]为信息初始化作用
//int Y[CP]={0};   //无用繁琐!     //定义进位信息存储数组

static flag=0;                     //执行函数标号值
void AGAIN();                      //输入错误处理函数
void BEGIN();                      //初始工作界面函数
void SINGLE(int a);                //单片74LS160十进制计数器模拟函数
void TDOUBLE(int a);                //两片74LS160十进制计数器模拟函数

int main()
{
	int i;
	for(i=0;i<1000;i++)
	{
		switch(flag)
		{
		case -1:
			 AGAIN();
			 break;
		case 1:
			SINGLE(number);
			break;
		case 2:
			TDOUBLE(number);
			break;
		default:
			BEGIN();
			break;
		}
	}
	return 0;
}

//初始工作界面函数
/*   功能:  输出欢迎信息,提示用户输入信息,过滤无效字符,确定用户目标进制数,取得目标计数器的标号*/
void BEGIN()
{
	int i,Number[10]={0},m=0;
	char s[10]={'0'};
	char *p;
	p=s;
    system("cls");
	printf("==========Welcome to use this program to check the Law of Counter!==========\n");
	printf(">>>>>>>>>>>>Please input a digital of D-Number less than 32 :   ");
	scanf("%s",s);
	for(i=0;i<10;i++)
	{
		if(*p=='\n')
		{
			continue;
		}
		if(*p>='0' && *p<='9')
		{
			Number[m]=*p-48;
			m++;
		}
		p++;
	}
	number=0;          //对全局变量的初始化
	for(i=0;i<m;i++)
	{
		number+=Number[i]*pow(10,m-1-i);
	}
	printf("\t\t=========你选择的是 *= %d =*进制计数器\n",number);
	Sleep(8*Time);
	if(number<=10  &&  number>=2)
	{ 
		flag=1;
	}
	else if(number<LimitNumber  && number>10)
	{
		flag=2;
	}
	else
	{
		flag=-1;                    //此函数对于所用到的全局变量(静态变量)有一个初始化步骤!!!
	}
}

//输入错误处理函数
/*    功能:对于用户输入最多10个字符自动过滤后数值不在2--99范围(包括边界)内,自动返回主界面*/
void AGAIN()
{
	flag=0;
	printf("Input ERROR! The D-Number inputed must more than 1 and less than 100 !!\n");
	//Sleep(4*Time);
	system("pause");
}

//单片74LS160进制计数器函数
/*    功能:处理 2--10进制*/
void SINGLE(int a)
{
	int i,j,s=0,sum[CP]={0};
	int Q[4][CP]={0},CLK[CP]={0},Y[CP]={0};
	/*
	CLK[CP]={0};
	Y[CP]={0};
	上述错误原因在于定义数组CLK[CP],Y[CP]后,CLK[CP],Y[CP]被认为是一个数组元素,且不在原始数组定义里面!!
	所以要用循环结构对每一个元素赋值:如
	for(i=0;i<CP;i++)
	{
	CLK[i]=0;
	Y[i]=0;
	}
	这样下来程序繁琐,还不如直接在被调用函数里面建立临时数组
	*/
	for(i=1;i<CP;i++)            //CLK[CP],Q[4][CP]初始化包含了此处i=0
	{
		CLK[i]=1;
		Q[0][i]=Q[0][i-1]+1;     //错误在此处!!!最低位不断+1
		for(j=1;j<4;j++)
		{
			Q[j][i]=Q[j][i-1];   //高位前一时刻值必须保存下来作为当前高位值,因为信息存储初始化全为0!!!!!!!!!!
		}
		
		for(j=0;j<4;j++)
		{
			if(Q[j][i]==2)                      //信息转换变更条件下使用2进制
			{
				Q[j][i]=0;
				Q[j+1][i]=Q[j+1][i-1]+1;        //高位的值要变为之前值加上来自低位的进位
			}
		}
		//求出计数值用于进位判断
		s=0;                     //每次需要从新计算当前脉冲作用状态后的计数器的十进制数值
        for(j=0;j<4;j++)
		{
			s=s+Q[j][i]*pow(2,j);          //避免累加效应错误!!!!
			sum[i]=s;
		}

//在s=a-1时,LD'=0,置数准备(此时CLK在上跳沿之后),进位片可以工作(但是CLK上跳沿没来)
//因而在下一个CLK上跳沿(第a个CLK信号)即s=a时,0000置入触发器,进位片计数器开始工作(加1)
//也就是在s=a时,Y[i]=0;Q[X][i]=0
		if(s==a)
		{
			Y[i]=1;
			sum[i]=0;
			for(j=0;j<4;j++)
			{
				Q[j][i]=0;
			}
		}	
	}
    //输出初始化信息
	printf("    \t\t *= %d =*进制计数器初始化归零信息如下:\n",number);
	printf("CLK-CLK[0]=0,JK-FF0-Q[0][0]=0,JK-FF1-Q[1][0]=0,JK-FF2-Q[2][0],JK-FF3-Q[3][0]=0\n");

	//输出模拟实验数码管显示结果
	printf("    \t\t>>>>>>>>>数码管显示结果如下:<<<<<<<<\n");
	for(i=1;i<CP;i++)
	{
		//Sleep(Time);
		printf("%2d-%-2d",Y[i],sum[i]);
		if(i%(BR-4)==0)
		{
			printf("\n");
		}
	}
	printf("\n");

	//输出脉冲波形
	printf("上跳沿CLK脉冲一共 %d 个,信息如下:\n",CP-1);
	Sleep(2*Time);
	for(i=1;i<CP;i++)
	{
		printf("%d_",CLK[i]);
		if(i%BR==0)
		{
			printf("\n");
		}
	}
	printf("\n");


	//输出触发器原变量波形
	for(i=0;i<4;i++)
	{
		printf("==========JK触发器FF%d-Q%d信息如下:\n",i,i);
		Sleep(2*Time);
		for(j=1;j<CP;j++)
		{
			//Sleep(Time);
			printf("%d_",Q[i][j]);
			if(j%BR==0)
			{
				printf("\n");
			}
		}
		printf("\n");
	}

	//输出进位波形
	printf("====================进位信息如下:\n");
	Sleep(2*Time);
	for(i=1;i<CP;i++)
	{
		printf("%d_",Y[i]);
		if(i%BR==0)
		{
			printf("\n");
		}
	}
	printf("\n");
	flag=0;
	system("pause");
}

//两片74LS160进制计数器函数
/*    功能:处理11--99进制*/
void TDOUBLE(int a)
{
	int i,j,s1=0,s2=0,s=0,sum1[CP]={0},sum2[CP]={0};
	int Q[8][CP]={0},CLK[CP]={0},Y[CP]={0};
	
	for(i=1;i<CP;i++)            //CLK[CP],Q[8][CP]初始化包含了此处i=0
	{
		CLK[i]=1;
		Q[0][i]=Q[0][i-1]+1;     //错误在此处!!!最低位不断+1

		//两片计数器中触发器原态值保存至次态
		for(j=1;j<8;j++)
		{
			Q[j][i]=Q[j][i-1];   //高位前一时刻值必须保存下来作为当前高位值,因为信息存储初始化全为0!!!!!!!!!!
		}

	    //第一片计数器进位对第二片计数器的作用(计数到10就有效)	
		for(j=0;j<4;j++)
		{
			if(Q[j][i]==2)                      //信息转换变更条件下使用2进制
			{
				Q[j][i]=0;
				Q[j+1][i]=Q[j+1][i-1]+1;        //高位的值要变为之前值加上来自低位的进位
			}
		}
		//求出第一片计数值用于进位判断
		s1=0;                                   //每次需要重新计算当前脉冲作用状态后的计数器的十进制数值
        for(j=0;j<4;j++)
		{
			s1=s1+Q[j][i]*pow(2,j);             //避免累加效应错误!!!!
			sum1[i]=s1;                         //第一片计数十进制数值保存在数组sum1[i]中                   
		}

		//第二片计数器工作条件
		if(s1==10)     //第一片计数器计满
		{
			//第一片计数器清零
			sum1[i]=0;
			s1=0;      //第一片计数器原变量之和s1归零,s1的值将传给Q[4][i]求和
			           //这也是体现权值的区分点
			for(j=0;j<4;j++)
			{
				Q[j][i]=0;
			}

			Q[4][i]=Q[4][i-1]+1;                    //第二片计数器最低位原态加1
			for(j=4;j<8;j++)
			{
				if(Q[j][i]==2)                      //信息转换变更条件下使用2进制
				{
					Q[j][i]=0;
					Q[j+1][i]=Q[j+1][i-1]+1;        //高位的值要变为之前值加上来自低位的进位
				}
			}
		}
		//求出第二片计数值用于进位判断
		s2=0;                                   //每次需要重新计算当前脉冲作用状态后的计数器的十进制数值
		for(j=4;j<8;j++)
		{
			s2=s2+Q[j][i]*pow(2,j-4);           //避免累加效应错误!!!!触发器重置!要避免其二进制幂级数守循环计数影响!!
			sum2[i]=s2;                         //第一片计数十进制数值保存在数组sum1[i]中
		}

//在s=a-1时,LD'=0,置数准备(此时CLK在上跳沿之后),进位片可以工作(但是CLK上跳沿没来)
//因而在下一个CLK上跳沿(第a个CLK信号)即s=a时,(0000,0000)置入触发器,进位片计数器开始工作(加1)
//也就是在s=a时,Y[i]=0;Q[X][i]=0
		s=s1+s2*10;         //s为两片计数器十进制数值之和
		if(s==a)
		{
			Y[i]=1;
			sum2[i]=0;
			sum1[i]=0;
			for(j=0;j<8;j++)
			{
				Q[j][i]=0;
			}
		}	
	}
    //输出初始化信息
	printf("    \t\t *= %d =*进制计数器初始化归零信息如下:\n",number);
	printf("CLK-CLK[0]=0,JK-FF0-Q[0][0]=0,JK-FF1-Q[1][0]=0,JK-FF2-Q[2][0],JK-FF3-Q[3][0]=0\n");
	printf("             JK-FF0-Q[4][0]=0,JK-FF1-Q[5][0]=0,JK-FF2-Q[6][0],JK-FF3-Q[7][0]=0\n");

	//输出模拟实验数码管显示结果
	printf("    \t\t>>>>>>>>>数码管显示结果如下:<<<<<<<<\n");
	for(i=1;i<CP;i++)
	{
		//Sleep(Time);
		printf("%2d-%d-%d",Y[i],sum2[i],sum1[i]);
		if(i%(BR-10)==0)
		{
			printf("\n");
		}
	}
	printf("\n");

	//输出脉冲波形
	printf("上跳沿CLK脉冲一共 %d 个,信息如下:\n",CP-1);
	Sleep(2*Time);
	for(i=1;i<CP;i++)
	{
		printf("%d_",CLK[i]);
		if(i%BR==0)
		{
			printf("\n");
		}
	}
	printf("\n");


	//输出触发器原变量波形
	for(i=0;i<8;i++)
	{
		printf("==========JK触发器FF%d-Q%d信息如下:\n",i,i);
		Sleep(2*Time);
		for(j=1;j<CP;j++)
		{
			//Sleep(Time);
			printf("%d_",Q[i][j]);
			if(j%BR==0)
			{
				printf("\n");
			}
		}
		printf("\n");
	}

	//输出进位波形
	printf("====================进位信息如下:\n");
	Sleep(2*Time);
	for(i=1;i<CP;i++)
	{
		printf("%d_",Y[i]);
		if(i%BR==0)
		{
			printf("\n");
		}
	}
	printf("\n");
	flag=0;
	system("pause");
}