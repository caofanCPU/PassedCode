#include <stdio.h>
#include <stdlib.h>
#define B_Bit  60 //按照O_Bit=4*OtoB_Bit 进行约束,节省空间
#define O_Bit  20  //说明:此程序对于输入具有容错功能,可以滤掉错误字符,在容错情况较多情况,建议增大H_Bit的值
//#define O_Bit 16 OR 32 OR ∞  (任意整数)
int main()
{
	int i,j,k1,k2,n,m,x,OtoB_number[B_Bit]={0},O1_number[O_Bit]={0};
	char w,O2_number[O_Bit]={'0'};
	printf("****Weclom to enter ** 8->2 ** Numerical-System-Change Worder!****\n");
	printf("******Please input a O_Number(八进制数):\n");
    
	k1=0;
	for(i=0;i<O_Bit;i++)
	{
		w=getchar();
		if((w>='0' && w<='7'))
		{
			O2_number[k1]=w;
			k1++;        //k1为输入有效的八进制数的位数
		}
		if(w=='\n')
		{
			break;
		}	
	}

	//显示输入的有效八进制数
	printf("Input H_number is:  ");
	for(i=0;i<k1;i++)
	{
		printf("%c",O2_number[i]);
	}
	printf(" O(八进制数)\n");

	//将有效八进制数字符位转换为八进制数位
	for(i=0;i<k1;i++)
	{
		if(O2_number[i]<='7' && O2_number[i]>='0')
		{
			O1_number[i]=O2_number[i]-48;
		}
	}

	//进制位转换结果检查
	for(i=0;i<k1;i++)
	{
		printf("O2=%4d\tO1=%4d\n",O2_number[i],O1_number[i]);
	}
	
    //输出界面
	j=0;
	k2=0;
	for(i=0;i<k1;i++)
	{
		x=O1_number[i];
		for(;j<3*(i+1);j++)
		{	
			n=x/2;
			m=x%2;
			x=n;
			OtoB_number[j]=m;             //保存余数,即(反序)保存二进制位
			if(x!=0)           //商不为0,继续作商取余
			{		
				k2++;          
			}
			else               //商为0,进制位转换结束,接下来判断是否要补0位
			{
				k2++;
				while(k2!=3*(i+1))        //当转换的二进制位不为4时
				{
					k2++;
					j++;
					OtoB_number[j]=0;     //该二进制位高位补0
				}
				j++;
				break;
			}      
		}		
	}

    printf("输入8进制位位数:k1=%4d\ n输出2进制位位数:k2=%4d\n",k1,k2);
    printf("进制转换后二进制初始态为:\n");

	//输出正确的二进制数结果
	for(i=0;i<k2;i++)
	{
		printf("%2d",OtoB_number[i]);
	}
	printf("\n\n");

	j=0;
	printf("Output OtoB_number is:  ");
	for(i=0;i<k1;i++)
	{
		x=k2-(k1-1-i)*3;
		for(j=x-1;j>x-4;j--)
		{
			printf("%d",OtoB_number[j]);
			if(j%3==0)
			{
				printf(" ");
			}
		}
	}
	printf("B(二进制数)\n");
	system("pause");
	system("cls");
	main();
	return 0;
}
